import{c6 as k,S as X,G as y,H as p,I as W,hy as Y,eO as J,dk as K,dg as O,hz as N,ga as Q,dm as Z,dr as ee,ds as te,b0 as w,a$ as ie,K as z,hA as H,b,h4 as re,aS as se,eV as q,eU as U,dl as B,df as $}from"./index-B1clX_ad.js";import{h as ne}from"./GraphicsLayer-BDmzjC5d.js";import{u as oe}from"./OverlayContainer-DRVkfLHg.js";import{e as ae}from"./Container-Cls3TW2m.js";import{a as le,S as he,y as ye}from"./LayerView--6oe_-ag.js";import{t as me}from"./GraphicContainer-CYMQY4O0.js";import{A as pe}from"./GraphicsView2D-9mW9ljGt.js";let d=class extends k.ClonableMixin(X){constructor(i){super(i),this.frame=null,this.frameCenter=null,this.frameOutline=null,this.lineOfSight=null,this.sensorLocation=null,this.sensorTrail=null}};y([p({type:Boolean})],d.prototype,"frame",void 0),y([p({type:Boolean})],d.prototype,"frameCenter",void 0),y([p({type:Boolean})],d.prototype,"frameOutline",void 0),y([p({type:Boolean})],d.prototype,"lineOfSight",void 0),y([p({type:Boolean})],d.prototype,"sensorLocation",void 0),y([p({type:Boolean})],d.prototype,"sensorTrail",void 0),d=y([W("esri.layers.support.TelemetryDisplay")],d);const j=d,T=2;class ce extends ae{constructor(e){super(),this.element=e,this._handles=new Y,this.isWrapAround=!1,this.perspectiveTransform=J(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(K(()=>this.element,()=>{const t=this.element;this.ready(),t&&this._handles.add(N(t,"play",()=>this.requestRender()))},O))}getMesh(e){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=Q(this.texture)}get textureSize(){if(!this.texture)return[1,1];const e=this.texture.descriptor;return[e.width,e.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const t=this.element;if(t==null)return;const{context:r}=e,{videoWidth:n,videoHeight:s}=t;if(n!==0&&s!==0){if(this.texture)t.paused||this.texture.setData(t);else{const o=new Z;o.wrapMode=ee.CLAMP_TO_EDGE,o.preMultiplyAlpha=!0,o.width=n,o.height=s,this.texture=new te(r,o,t)}t.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(e)}}_createTransforms(){return null}updateDrawCoords(e,t,r,n){const s=this.element,o=this._getFrameInfo();if(!s||!o)return;this._initializeData(e,o,r);const{controlPoints:l,horizon:m}=o,h=Math.sqrt(l.length),c=h,{x:a,y:u}=e,_=this._vertices,P=l[0],G=l[h-1],F=l[(c-1)*h],I=l[(c-1)*h+h-1],S=w(m?m[0].mapPoint:P.mapPoint,r),L=w(m?m[1].mapPoint:G.mapPoint,r),v=w(F.mapPoint,r),D=w(I.mapPoint,r);this.clipGeometry=m?new le({geometry:ie.fromJSON({rings:[[[v.x,v.y],[D.x,D.y],[L.x,L.y],[S.x,S.y],[v.x,v.y]]],spatialReference:r})}):null;for(let f=0;f<l.length;f++){const A=l[f],{sourcePoint:M,mapPoint:V}=A;if(M==null||V==null)continue;const x=w(V,r);_[f*T+0]=x.x-a,_[f*T+1]=x.y-u}let E=t;if(n){const f=Math.min(S.x,L.x,v.x,D.x),A=Math.max(S.x,L.x,v.x,D.x),{worldWidth:M,xBounds:V}=n,[x,R]=V;f<x&&A>x?E=M:A>R&&f<R&&(E=-M)}this.wrapAroundShift=E,this.isWrapAround=E!==0}draw(e,t){this.isReady&&this._vertices&&this._indices&&this._texCoords?t.render(e,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(e,t,r){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:n}=t,s=Math.sqrt(n.length),o=s,l=new Float32Array(T*n.length),m=new Uint16Array(2*n.length);for(let a=0;a<n.length;a++){const u=n[a],{sourcePoint:_,mapPoint:P}=u;if(_==null||P==null)continue;const G=w(P,r);l[a*T+0]=G.x-e.x,l[a*T+1]=G.y-e.y,m[2*a+0]=_.x,m[2*a+1]=_.y}const h=new Uint16Array(o*s+(o-2)*(s+2));let c=0;for(let a=0;a<o;a++){for(let u=0;u<s;u++)h[c++]=a*s+u,h[c++]=(a+1)*s+u;a<o-2&&(h[c++]=(a+1)*s+(s-1),h[c++]=(a+1)*s)}this._vertices=l,this._texCoords=m,this._indices=h}_getFrameInfo(){if(!this.groundControlPoints)return null;const e=this._getFrameControlPoints(),t=this.frameHorizonPoints;let r=null;if(t){const n=t.startX,s=t.startY,o=t.endX,l=t.endY;r=[{sourcePoint:H(n,s),mapPoint:new z(t.startLongitude,t.startLatitude)},{sourcePoint:H(o,l),mapPoint:new z(t.endLongitude,t.endLatitude)}]}return{controlPoints:e,horizon:r}}_getFrameControlPoints(){const e=this.groundControlPoints,t=e==null?void 0:e.length;if(!t)return[];const r=new Array(t),n=Math.max(...e.map(({x:o})=>o)),s=this.element.videoWidth/n;for(let o=0;o<t;o++){const{x:l,y:m,lat:h,lon:c}=e[o];r[o]={sourcePoint:H(l*s,-m*s),mapPoint:new z(c,h)}}return r}}const C=new se([255,127,0]);let g=class extends he(ye){constructor(){super(...arguments),this._graphicsLayer=new ne,this._frameOutlineGraphic=new b({symbol:new re({outline:{type:"simple-line",color:C}})}),this._sensorTrailGraphic=new b({symbol:new q({color:C})}),this._lineOfSightGraphic=new b({symbol:new q({color:C})}),this._sensorLocationGraphic=new b({symbol:new U({color:C})}),this._frameCenterGraphic=new b({symbol:new U({color:C,style:"cross"})}),this._overlayContainer=null,this.layer=null,this.symbolColor=C,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=B(this._graphicsLayer)}initialize(){var i,e,t,r,n,s;this.addHandles($(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},O)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new j({frame:((i=this.layer.telemetryDisplay)==null?void 0:i.frame)??!1,frameCenter:((e=this.layer.telemetryDisplay)==null?void 0:e.frameCenter)??!0,frameOutline:((t=this.layer.telemetryDisplay)==null?void 0:t.frameOutline)??!0,lineOfSight:((r=this.layer.telemetryDisplay)==null?void 0:r.lineOfSight)??!0,sensorLocation:((n=this.layer.telemetryDisplay)==null?void 0:n.sensorLocation)??!0,sensorTrail:((s=this.layer.telemetryDisplay)==null?void 0:s.sensorTrail)??!0})}attach(){this._overlayContainer=new oe,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new pe({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new me(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([$(()=>{var i,e,t,r,n,s;return[(i=this.layer.telemetryDisplay)==null?void 0:i.frame,(e=this.layer.telemetryDisplay)==null?void 0:e.frameCenter,(t=this.layer.telemetryDisplay)==null?void 0:t.frameOutline,(r=this.layer.telemetryDisplay)==null?void 0:r.sensorLocation,(n=this.layer.telemetryDisplay)==null?void 0:n.sensorTrail,(s=this.layer.telemetryDisplay)==null?void 0:s.lineOfSight]},()=>this._updateVisibleTelemetryElements(),O),$(()=>{var i,e,t,r,n;return[this.layer.telemetry,(i=this.visibleTelemetryElements)==null?void 0:i.frameCenter,(e=this.visibleTelemetryElements)==null?void 0:e.frameOutline,(t=this.visibleTelemetryElements)==null?void 0:t.sensorLocation,(r=this.visibleTelemetryElements)==null?void 0:r.sensorTrail,(n=this.visibleTelemetryElements)==null?void 0:n.lineOfSight]},()=>this._updateGraphicGeometries(),O)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=B(this.graphicsView)}supportsSpatialReference(i){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(i){this.graphicsView.processUpdate(i)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:i}=this.layer,{visibleTelemetryElements:e}=this;i&&e&&(e.frameOutline&&i.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,e.sensorTrail&&i.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,e.lineOfSight&&i.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,e.sensorLocation&&i.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,e.frameCenter&&i.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const i=new ce(this.layer.videoElement);this.addAttachHandles([$(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{const{visibleTelemetryElements:e}=this;e!=null&&e.frame?(i.frameHorizonPoints=this.layer.frameHorizonPoints,i.groundControlPoints=this.layer.groundControlPoints,i.opacity=1):i.opacity=0},O)]),this._overlayContainer.addChild(i),this.view.stage.requestRender()}};y([p()],g.prototype,"graphicsView",void 0),y([p()],g.prototype,"layer",void 0),y([p()],g.prototype,"symbolColor",void 0),y([p({type:j})],g.prototype,"visibleTelemetryElements",void 0),g=y([W("esri.views.2d.layers.VideoLayerView2D")],g);const de=g,xe=Object.freeze(Object.defineProperty({__proto__:null,default:de},Symbol.toStringTag,{value:"Module"}));export{xe as V,j as l};
