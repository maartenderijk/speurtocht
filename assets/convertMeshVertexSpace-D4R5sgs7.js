import{aO as s,s as m,a as p}from"./index-DevCBUKG.js";import{p as n}from"./MeshVertexAttributes-SKknmCar.js";import{B as a}from"./vertexSpaceConversion-BLRiiSJK.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-CKnN6P0c.js";import"./computeTranslationToOriginAndRotation-CNJ9rw6e.js";import"./projectPointToVector-DTF2ECs-.js";import"./meshVertexSpaceUtils-DOnMPEQJ.js";import"./MeshLocalVertexSpace-BtBjVcD3.js";import"./vec3-C55HiuFr.js";import"./BufferView-Spku9dXL.js";import"./vec4-j12N5qg8.js";async function M(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
