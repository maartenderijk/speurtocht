const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/RouteLayerInteraction-CacUnf0e.js","assets/index-B1clX_ad.js","assets/GraphicsLayer-BDmzjC5d.js","assets/SketchOptions-CQSjjGKg.js","assets/geodesicUtils-gK-LWLMm.js","assets/plane-CLRQzWRo.js","assets/mat3f64-q3fE-ZOt.js","assets/mat4f64-Dk4dwAN8.js","assets/quatf64-aQ5IuZRd.js","assets/sphere-DXmJaO3M.js","assets/projectVectorToVector-Bw0MIpqx.js","assets/projectPointToVector-CEzVccQ8.js","assets/quantityUtils-CDzg45vv.js"])))=>i.map(i=>d[i]);
import{jW as l,c6 as O,S as w,G as t,H as r,c9 as M,cF as c,c4 as I,I as S,b as j,cB as Z,dh as F,m0 as _,K as Q,a$ as ae,V as $,m1 as oe,df as V,h5 as ne,dg as le,b4 as x,aM as ie,aP as ue}from"./index-B1clX_ad.js";import{S as pe,y as de}from"./LayerView--6oe_-ag.js";import{t as ce}from"./GraphicContainer-CYMQY4O0.js";import{A as me}from"./GraphicsView2D-9mW9ljGt.js";const se={esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriUnknownUnits:"unknown",esriYards:"yards"},ye=l()(se),We=l()({...se,esriIntFeet:"international-feet",esriIntInches:"international-inches",esriIntMiles:"international-miles",esriIntNauticalMiles:"international-nautical-miles",esriIntYards:"international-yards"}),Ve=l()({esriAcres:"international-acres",esriAcresUS:"us-acres",esriAres:"ares",esriHectares:"hectares",esriSquareCentimeters:"square-centimeters",esriSquareDecimeters:"square-decimeters",esriSquareFeet:"square-international-feet",esriSquareFeetUS:"square-us-feet",esriSquareInches:"square-international-inches",esriSquareInchesUS:"square-us-inches",esriSquareKilometers:"square-kilometers",esriSquareMeters:"square-meters",esriSquareMiles:"square-international-miles",esriSquareMilesUS:"square-us-miles",esriSquareMillimeters:"square-millimeters",esriSquareYards:"square-international-yards",esriSquareYardsUS:"square-us-yards",esriUnknownAreaUnits:"unknown"}),Pe=l()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards"}),Je=l()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards",esriNAUDays:"days",esriNAUHours:"hours",esriNAUMinutes:"minutes",esriNAUSeconds:"seconds",esriNAUKilometersPerHour:"kilometers-per-hour",esriNAUMilesPerHour:"miles-per-hour",esriNAUUnknown:"unknown"}),Be=l()({esriDOTComplete:"complete",esriDOTCompleteNoEvents:"complete-no-events",esriDOTFeatureSets:"featuresets",esriDOTInstructionsOnly:"instructions-only",esriDOTStandard:"standard",esriDOTSummaryOnly:"summary-only"}),Re=l()({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"});l()({esriNAOutputPolygonNone:"none",esriNAOutputPolygonSimplified:"simplified",esriNAOutputPolygonDetailed:"detailed"});const he=l()({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"});l()({esriNATravelDirectionFromFacility:"from-facility",esriNATravelDirectionToFacility:"to-facility"});l()({esriNATimeOfDayNotUsed:"not-used",esriNATimeOfDayUseAsStartTime:"start",esriNATimeOfDayUseAsEndTime:"end"});const Te=l()({AUTOMOBILE:"automobile",TRUCK:"truck",WALK:"walk",OTHER:"other"}),y=l()({0:"either-side-of-vehicle",1:"right-side-of-vehicle",2:"left-side-of-vehicle",3:"no-u-turn"},{useNumericKeys:!0}),L=l()({0:"stop",1:"waypoint",2:"break"},{useNumericKeys:!0}),A=l()({0:"ok",1:"not-located",2:"network-element-not-located",3:"element-not-traversable",4:"invalid-field-values",5:"not-reached",6:"time-window-violation",7:"not-located-on-closest"},{useNumericKeys:!0}),P=l()({1:"right",2:"left"},{useNumericKeys:!0}),v=l()({0:"restriction",1:"scaled-cost",2:"added-cost"},{useNumericKeys:!0}),W=l()({0:"permit",1:"restrict"},{useNumericKeys:!0}),J=l()({1:"header",50:"arrive",51:"depart",52:"straight",100:"on-ferry",101:"off-ferry",102:"central-fork",103:"roundabout",104:"u-turn",150:"door",151:"stairs",152:"elevator",153:"escalator",154:"pedestrian-ramp",200:"left-fork",201:"left-ramp",202:"clockwise-roundabout",203:"left-handed-u-turn",204:"bear-left",205:"left-turn",206:"sharp-left",207:"left-turn-and-immediate-left-turn",208:"left-turn-and-immediate-right-turn",300:"right-fork",301:"right-ramp",302:"counter-clockwise-roundabout",303:"right-handed-u-turn",304:"bear-right",305:"right-turn",306:"sharp-right",307:"right-turn-and-immediate-left-turn",308:"right-turn-and-immediate-right-turn",400:"up-elevator",401:"up-escalator",402:"up-stairs",500:"down-elevator",501:"down-escalator",502:"down-stairs",1e3:"general-event",1001:"landmark",1002:"time-zone-change",1003:"traffic-event",1004:"scaled-cost-barrier-event",1005:"boundary-crossing",1006:"restriction-violation",1007:"lane"},{useNumericKeys:!0}),B=l()({0:"unknown",1:"segment",2:"maneuver-segment",3:"restriction-violation",4:"scaled-cost-barrier",5:"heavy-traffic",6:"slow-traffic",7:"moderate-traffic"},{useNumericKeys:!0}),xe=l()({"NA Campus":"campus","NA Desktop":"desktop","NA Navigation":"navigation"}),be=l()({Kilometers:"kilometers",Miles:"miles",Meters:"meters"},{ignoreUnknown:!1}),ve=l()({Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),C=l()({Kilometers:"kilometers",Miles:"miles",Meters:"meters",Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),re=l()({"Any Hazmat Prohibited":"any-hazmat-prohibited","Avoid Carpool Roads":"avoid-carpool-roads","Avoid Express Lanes":"avoid-express-lanes","Avoid Ferries":"avoid-ferries","Avoid Gates":"avoid-gates","Avoid Limited Access Roads":"avoid-limited-access-roads","Avoid Private Roads":"avoid-private-roads","Avoid Roads Unsuitable for Pedestrians":"avoid-roads-unsuitable-for-pedestrians","Avoid Stairways":"avoid-stairways","Avoid Toll Roads":"avoid-toll-roads","Avoid Toll Roads for Trucks":"avoid-toll-roads-for-trucks","Avoid Truck Restricted Roads":"avoid-truck-restricted-roads","Avoid Unpaved Roads":"avoid-unpaved-roads","Axle Count Restriction":"axle-count-restriction","Driving a Bus":"driving-a-bus","Driving a Taxi":"driving-a-taxi","Driving a Truck":"driving-a-truck","Driving an Automobile":"driving-an-automobile","Driving an Emergency Vehicle":"driving-an-emergency-vehicle","Height Restriction":"height-restriction","Kingpin to Rear Axle Length Restriction":"kingpin-to-rear-axle-length-restriction","Length Restriction":"length-restriction","Preferred for Pedestrians":"preferred-for-pedestrians","Riding a Motorcycle":"riding-a-motorcycle","Roads Under Construction Prohibited":"roads-under-construction-prohibited","Semi or Tractor with One or More Trailers Prohibited":"semi-or-tractor-with-one-or-more-trailers-prohibited","Single Axle Vehicles Prohibited":"single-axle-vehicles-prohibited","Tandem Axle Vehicles Prohibited":"tandem-axle-vehicles-prohibited","Through Traffic Prohibited":"through-traffic-prohibited","Truck with Trailers Restriction":"truck-with-trailers-restriction","Use Preferred Hazmat Routes":"use-preferred-hazmat-routes","Use Preferred Truck Routes":"use-preferred-truck-routes",Walking:"walking","Weight Restriction":"weight-restriction"},{ignoreUnknown:!1}),$e=l()({esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelEnvelopeIntersects:"envelope-intersects",esriSpatialRelIndexIntersects:"index-intersects",esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:"relation"}),qe=l()({esriGeometryPoint:"point",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"envelope",esriGeometryMultipoint:"multipoint"}),Ge=l()({esriNAUTCost:"cost",esriNAUTDescriptor:"descriptor",esriNAUTRestriction:"restriction",esriNAUTHierarchy:"hierarchy"}),He=l()({esriDSTAltName:"alt-name",esriDSTArrive:"arrive",esriDSTBranch:"branch",esriDSTCrossStreet:"cross-street",esriDSTCumulativeLength:"cumulative-length",esriDSTDepart:"depart",esriDSTEstimatedArrivalTime:"estimated-arrival-time",esriDSTExit:"exit",esriDSTGeneral:"general",esriDSTLength:"length",esriDSTServiceTime:"service-time",esriDSTStreetName:"street-name",esriDSTSummary:"summary",esriDSTTime:"time",esriDSTTimeWindow:"time-window",esriDSTToward:"toward",esriDSTViolationTime:"violation-time",esriDSTWaitTime:"wait-time"});let m=class extends O.ClonableMixin(w){constructor(i){super(i),this.attributeParameterValues=null,this.description=null,this.distanceAttributeName=null,this.id=null,this.impedanceAttributeName=null,this.name=null,this.restrictionAttributeNames=null,this.simplificationTolerance=null,this.simplificationToleranceUnits=null,this.timeAttributeName=null,this.type=null,this.useHierarchy=null,this.uturnAtJunctions=null}readId(i,s){return s.id??s.itemId??null}readRestrictionAttributes(i,s){const{restrictionAttributeNames:o}=s;return o==null?null:o.map(p=>re.fromJSON(p))}writeRestrictionAttributes(i,s,o){i!=null&&(s[o]=i.map(p=>re.toJSON(p)))}};t([r({type:[Object],json:{write:!0}})],m.prototype,"attributeParameterValues",void 0),t([r({type:String,json:{write:!0}})],m.prototype,"description",void 0),t([M(be,{ignoreUnknown:!1})],m.prototype,"distanceAttributeName",void 0),t([r({type:String,json:{write:!0}})],m.prototype,"id",void 0),t([c("id",["id","itemId"])],m.prototype,"readId",null),t([M(C,{ignoreUnknown:!1})],m.prototype,"impedanceAttributeName",void 0),t([r({type:String,json:{write:!0}})],m.prototype,"name",void 0),t([r({type:[String],json:{write:!0}})],m.prototype,"restrictionAttributeNames",void 0),t([c("restrictionAttributeNames")],m.prototype,"readRestrictionAttributes",null),t([I("restrictionAttributeNames")],m.prototype,"writeRestrictionAttributes",null),t([r({type:Number,json:{write:{allowNull:!0}}})],m.prototype,"simplificationTolerance",void 0),t([M(ye)],m.prototype,"simplificationToleranceUnits",void 0),t([M(ve,{ignoreUnknown:!1})],m.prototype,"timeAttributeName",void 0),t([M(Te)],m.prototype,"type",void 0),t([r({type:Boolean,json:{write:!0}})],m.prototype,"useHierarchy",void 0),t([M(he)],m.prototype,"uturnAtJunctions",void 0),m=t([S("esri.rest.support.TravelMode")],m);const ge=m;function f(e,i){if(e==null)return null;const s={},o=new RegExp(`^${i}`,"i");for(const p of Object.keys(e))if(o.test(p)){const N=p.slice(i.length);s[C.fromJSON(N)]=e[p]}return s}function ee(e,i,s){if(e!=null){i.attributes||(i.attributes={});for(const o in e){const p=C.toJSON(o);i.attributes[`${s}${p}`]=e[o]}}}function U(e){const i={};for(const s of Object.keys(e)){const o=s;i[C.fromJSON(o)]=e[s]}return i}function k(e){const i={};for(const s of Object.keys(e)){const o=s;i[C.toJSON(o)]=e[s]}return i}function R(e,i){return e==null||i==null?null:Math.round((e-i)/6e4)}function ze(e){var o,p,N;const i=e.toJSON(),s=i;return s.accumulateAttributeNames&&(s.accumulateAttributeNames=(o=i.accumulateAttributeNames)==null?void 0:o.join()),s.attributeParameterValues&&(s.attributeParameterValues=JSON.stringify(i.attributeParameterValues)),s.barriers&&(s.barriers=JSON.stringify(i.barriers)),s.outSR&&(s.outSR=(p=i.outSR)==null?void 0:p.wkid),s.overrides&&(s.overrides=JSON.stringify(i.overrides)),s.polygonBarriers&&(s.polygonBarriers=JSON.stringify(i.polygonBarriers)),s.polylineBarriers&&(s.polylineBarriers=JSON.stringify(i.polylineBarriers)),s.restrictionAttributeNames&&(s.restrictionAttributeNames=(N=i.restrictionAttributeNames)==null?void 0:N.join()),s.stops&&(s.stops=JSON.stringify(i.stops)),s.travelMode&&(s.travelMode=JSON.stringify(i.travelMode)),s}var q;let h=q=class extends O.ClonableMixin(w){constructor(e){super(e),this.directionLineType=null,this.directionPointId=null,this.distance=null,this.duration=null,this.fromLevel=null,this.geometry=null,this.objectId=null,this.popupTemplate=null,this.symbol=null,this.toLevel=null,this.type="direction-line"}static fromGraphic(e){return new q({directionLineType:B.fromJSON(e.attributes.DirectionLineType),directionPointId:e.attributes.DirectionPointID,distance:e.attributes.Meters,duration:e.attributes.Minutes,fromLevel:e.attributes.FromLevel??null,geometry:e.geometry,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,symbol:e.symbol,toLevel:e.attributes.ToLevel??null})}toGraphic(){const e={ObjectID:this.objectId,DirectionLineType:this.directionLineType!=null?B.toJSON(this.directionLineType):null,DirectionPointID:this.directionPointId,Meters:this.distance,Minutes:this.duration};return this.fromLevel!=null&&(e.FromLevel=this.fromLevel),this.toLevel!=null&&(e.ToLevel=this.toLevel),new j({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};h.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"DirectionLineType",alias:"Line Type",type:"esriFieldTypeInteger"},{name:"DirectionPointID",alias:"Direction Point ID",type:"esriFieldTypeInteger"},{name:"FromLevel",alias:"From Level",type:"esriFieldTypeInteger"},{name:"Meters",alias:"Meters",type:"esriFieldTypeDouble"},{name:"Minutes",alias:"Minutes",type:"esriFieldTypeDouble"},{name:"ToLevel",alias:"To Level",type:"esriFieldTypeInteger"}],t([r({type:B.apiValues,json:{read:{source:"attributes.DirectionLineType",reader:B.read}}})],h.prototype,"directionLineType",void 0),t([r({json:{read:{source:"attributes.DirectionPointID"}}})],h.prototype,"directionPointId",void 0),t([r({json:{read:{source:"attributes.Meters"}}})],h.prototype,"distance",void 0),t([r({json:{read:{source:"attributes.Minutes"}}})],h.prototype,"duration",void 0),t([r({json:{read:{source:"attributes.FromLevel"}}})],h.prototype,"fromLevel",void 0),t([r({type:Z})],h.prototype,"geometry",void 0),t([r({json:{read:{source:"attributes.ObjectID"}}})],h.prototype,"objectId",void 0),t([r({type:F})],h.prototype,"popupTemplate",void 0),t([r({types:_})],h.prototype,"symbol",void 0),t([r({json:{read:{source:"attributes.ToLevel"}}})],h.prototype,"toLevel",void 0),t([r({readOnly:!0,json:{read:!1}})],h.prototype,"type",void 0),h=q=t([S("esri.rest.support.DirectionLine")],h);const fe=h;var G;let u=G=class extends O.ClonableMixin(w){constructor(e){super(e),this.alternateName=null,this.arrivalTime=null,this.arrivalTimeOffset=null,this.azimuth=null,this.branchName=null,this.directionPointType=null,this.displayText=null,this.exitName=null,this.geometry=null,this.intersectingName=null,this.level=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sequence=null,this.shortVoiceInstruction=null,this.stopId=null,this.symbol=null,this.towardName=null,this.type="direction-point",this.voiceInstruction=null}readArrivalTime(e,i){return i.attributes.ArrivalTime!=null?new Date(i.attributes.ArrivalTime):null}static fromGraphic(e){return new G({alternateName:e.attributes.AlternateName??null,arrivalTime:e.attributes.ArrivalTime!=null?new Date(e.attributes.ArrivalTime):null,arrivalTimeOffset:e.attributes.ArrivalUTCOffset??null,azimuth:e.attributes.Azimuth??null,branchName:e.attributes.BranchName??null,directionPointType:J.fromJSON(e.attributes.DirectionPointType),displayText:e.attributes.DisplayText??null,exitName:e.attributes.ExitName??null,geometry:e.geometry,intersectingName:e.attributes.IntersectingName??null,level:e.attributes.Level??null,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,sequence:e.attributes.Sequence,shortVoiceInstruction:e.attributes.ShortVoiceInstruction??null,stopId:e.attributes.StopID??null,symbol:e.symbol,towardName:e.attributes.TowardName??null,voiceInstruction:e.attributes.VoiceInstruction??null})}toGraphic(){const e={ObjectID:this.objectId,DirectionPointType:this.directionPointType!=null?J.toJSON(this.directionPointType):null,Sequence:this.sequence,StopID:this.stopId};return this.alternateName!=null&&(e.AlternateName=this.alternateName),this.arrivalTime!=null&&(e.ArrivalTime=this.arrivalTime.getTime()),this.arrivalTimeOffset!=null&&(e.ArrivalUTCOffset=this.arrivalTimeOffset),this.azimuth!=null&&(e.Azimuth=this.azimuth),this.branchName!=null&&(e.BranchName=this.branchName),this.displayText!=null&&(e.DisplayText=this.displayText),this.exitName!=null&&(e.ExitName=this.exitName),this.intersectingName!=null&&(e.IntersectingName=this.intersectingName),this.level!=null&&(e.Level=this.level),this.name!=null&&(e.Name=this.name),this.shortVoiceInstruction!=null&&(e.ShortVoiceInstruction=this.shortVoiceInstruction),this.towardName!=null&&(e.TowardName=this.towardName),this.voiceInstruction!=null&&(e.VoiceInstruction=this.voiceInstruction),new j({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};u.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AlternateName",alias:"Alternative Name",type:"esriFieldTypeString"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time Offset",type:"esriFieldTypeInteger"},{name:"Azimuth",alias:"Azimuth",type:"esriFieldTypeDouble"},{name:"BranchName",alias:"Branch Name",type:"esriFieldTypeString"},{name:"DirectionPointType",alias:"Directions Point Type",type:"esriFieldTypeInteger"},{name:"DisplayText",alias:"Display Text",type:"esriFieldTypeString"},{name:"ExitName",alias:"Exit Name",type:"esriFieldTypeString"},{name:"IntersectingName",alias:"Intersecting Name",type:"esriFieldTypeString"},{name:"Level",alias:"Level",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ShortVoiceInstruction",alias:"Short Voice Instruction",type:"esriFieldTypeString"},{name:"StopID",alias:"Stop ID",type:"esriFieldTypeInteger"},{name:"TowardName",alias:"Toward Name",type:"esriFieldTypeString"},{name:"VoiceInstruction",alias:"Voice Instruction",type:"esriFieldTypeString"}],t([r({json:{read:{source:"attributes.AlternateName"}}})],u.prototype,"alternateName",void 0),t([r({type:Date})],u.prototype,"arrivalTime",void 0),t([c("arrivalTime",["attributes.ArrivalTime"])],u.prototype,"readArrivalTime",null),t([r({json:{read:{source:"attributes.ArrivalUTCOffset"}}})],u.prototype,"arrivalTimeOffset",void 0),t([r({json:{read:{source:"attributes.Azimuth"}}})],u.prototype,"azimuth",void 0),t([r({json:{read:{source:"attributes.BranchName"}}})],u.prototype,"branchName",void 0),t([r({type:J.apiValues,json:{read:{source:"attributes.DirectionPointType",reader:J.read}}})],u.prototype,"directionPointType",void 0),t([r({json:{read:{source:"attributes.DisplayText"}}})],u.prototype,"displayText",void 0),t([r({json:{read:{source:"attributes.ExitName"}}})],u.prototype,"exitName",void 0),t([r({type:Q})],u.prototype,"geometry",void 0),t([r({json:{read:{source:"attributes.IntersectingName"}}})],u.prototype,"intersectingName",void 0),t([r({json:{read:{source:"attributes.Level"}}})],u.prototype,"level",void 0),t([r({json:{read:{source:"attributes.Name"}}})],u.prototype,"name",void 0),t([r({json:{read:{source:"attributes.ObjectID"}}})],u.prototype,"objectId",void 0),t([r({type:F})],u.prototype,"popupTemplate",void 0),t([r({json:{read:{source:"attributes.Sequence"}}})],u.prototype,"sequence",void 0),t([r({json:{read:{source:"attributes.ShortVoiceInstruction"}}})],u.prototype,"shortVoiceInstruction",void 0),t([r({json:{read:{source:"attributes.StopID"}}})],u.prototype,"stopId",void 0),t([r({types:_})],u.prototype,"symbol",void 0),t([r({json:{read:{source:"attributes.TowardName"}}})],u.prototype,"towardName",void 0),t([r({readOnly:!0,json:{read:!1}})],u.prototype,"type",void 0),t([r({json:{read:{source:"attributes.VoiceInstruction"}}})],u.prototype,"voiceInstruction",void 0),u=G=t([S("esri.rest.support.DirectionPoint")],u);const Se=u;var H;let d=H=class extends O.ClonableMixin(w){constructor(e){super(e),this.addedCost=null,this.barrierType=null,this.costs=null,this.curbApproach=null,this.fullEdge=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sideOfEdge=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.type="point-barrier"}readCosts(e,i){return f(i.attributes,"Attr_")}writeCosts(e,i){ee(e,i,"Attr_")}static fromGraphic(e){return new H({addedCost:e.attributes.AddedCost??null,barrierType:e.attributes.BarrierType!=null?v.fromJSON(e.attributes.BarrierType):null,costs:e.attributes.Costs!=null?U(JSON.parse(e.attributes.Costs)):null,curbApproach:e.attributes.CurbApproach!=null?y.fromJSON(e.attributes.CurbApproach):null,fullEdge:e.attributes.FullEdge!=null?W.fromJSON(e.attributes.FullEdge):null,geometry:e.geometry,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,status:e.attributes.Status!=null?A.fromJSON(e.attributes.Status):null,symbol:e.symbol})}toGraphic(){const e={ObjectID:this.objectId,AddedCost:this.addedCost,BarrierType:this.barrierType!=null?v.toJSON(this.barrierType):null,Costs:this.costs!=null?JSON.stringify(k(this.costs)):null,CurbApproach:this.curbApproach!=null?y.toJSON(this.curbApproach):null,FullEdge:this.fullEdge!=null?W.toJSON(this.fullEdge):null,Name:this.name,Status:this.status!=null?A.toJSON(this.status):null};return new j({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};d.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AddedCost",alias:"Added Cost",type:"esriFieldTypeDouble"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"FullEdge",alias:"Full Edge",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"}],t([r()],d.prototype,"addedCost",void 0),t([r({type:v.apiValues,json:{name:"attributes.BarrierType",read:{reader:v.read},write:{writer:v.write}}})],d.prototype,"barrierType",void 0),t([r()],d.prototype,"costs",void 0),t([c("costs",["attributes"])],d.prototype,"readCosts",null),t([I("costs")],d.prototype,"writeCosts",null),t([r({type:y.apiValues,json:{read:{source:"attributes.CurbApproach",reader:y.read}}})],d.prototype,"curbApproach",void 0),t([r({type:W.apiValues,json:{name:"attributes.FullEdge",read:{reader:W.read},write:{writer:W.write}}})],d.prototype,"fullEdge",void 0),t([r({type:Q,json:{write:!0}})],d.prototype,"geometry",void 0),t([r({json:{name:"attributes.Name"}})],d.prototype,"name",void 0),t([r({json:{name:"attributes.ObjectID"}})],d.prototype,"objectId",void 0),t([r({type:F})],d.prototype,"popupTemplate",void 0),t([r({type:P.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:P.read}}})],d.prototype,"sideOfEdge",void 0),t([r({json:{read:{source:"attributes.SourceID"}}})],d.prototype,"sourceId",void 0),t([r({json:{read:{source:"attributes.SourceOID"}}})],d.prototype,"sourceOid",void 0),t([r({type:A.apiValues,json:{read:{source:"attributes.Status",reader:A.read}}})],d.prototype,"status",void 0),t([r({types:_})],d.prototype,"symbol",void 0),t([r({readOnly:!0,json:{read:!1}})],d.prototype,"type",void 0),d=H=t([S("esri.rest.support.PointBarrier")],d);const we=d;var K;let T=K=class extends O.ClonableMixin(w){constructor(e){super(e),this.barrierType=null,this.costs=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.scaleFactor=null,this.symbol=null,this.type="polygon-barrier"}readCosts(e,i){return f(i.attributes,"Attr_")}writeCosts(e,i){ee(e,i,"Attr_")}static fromGraphic(e){return new K({barrierType:e.attributes.BarrierType!=null?v.fromJSON(e.attributes.BarrierType):null,costs:e.attributes.Costs!=null?U(JSON.parse(e.attributes.Costs)):null,geometry:e.geometry,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,scaleFactor:e.attributes.ScaleFactor??null,symbol:e.symbol})}toGraphic(){const e={ObjectID:this.objectId,BarrierType:this.barrierType!=null?v.toJSON(this.barrierType):null,Costs:this.costs!=null?JSON.stringify(k(this.costs)):null,Name:this.name??null,ScaleFactor:this.scaleFactor??null};return new j({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};T.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"ScaleFactor",alias:"Scale Factor",type:"esriFieldTypeDouble"}],t([r({type:v.apiValues,json:{name:"attributes.BarrierType",read:{reader:v.read},write:{writer:v.write}}})],T.prototype,"barrierType",void 0),t([r()],T.prototype,"costs",void 0),t([c("costs",["attributes"])],T.prototype,"readCosts",null),t([I("costs")],T.prototype,"writeCosts",null),t([r({type:ae,json:{write:!0}})],T.prototype,"geometry",void 0),t([r({json:{name:"attributes.Name"}})],T.prototype,"name",void 0),t([r({json:{name:"attributes.ObjectID"}})],T.prototype,"objectId",void 0),t([r({type:F})],T.prototype,"popupTemplate",void 0),t([r()],T.prototype,"scaleFactor",void 0),t([r({types:_})],T.prototype,"symbol",void 0),t([r({readOnly:!0,json:{read:!1}})],T.prototype,"type",void 0),T=K=t([S("esri.rest.support.PolygonBarrier")],T);const Ne=T;var z;let b=z=class extends O.ClonableMixin(w){constructor(e){super(e),this.barrierType=null,this.costs=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.scaleFactor=null,this.symbol=null,this.type="polyline-barrier"}readCosts(e,i){return f(i.attributes,"Attr_")}static fromGraphic(e){return new z({barrierType:e.attributes.BarrierType!=null?v.fromJSON(e.attributes.BarrierType):null,costs:e.attributes.Costs!=null?U(JSON.parse(e.attributes.Costs)):null,geometry:e.geometry,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,scaleFactor:e.attributes.ScaleFactor??null,symbol:e.symbol})}toGraphic(){const e={ObjectID:this.objectId,BarrierType:this.barrierType!=null?v.toJSON(this.barrierType):null,Costs:this.costs!=null?JSON.stringify(k(this.costs)):null,Name:this.name,ScaleFactor:this.scaleFactor};return new j({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};b.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"ScaleFactor",alias:"Scale Factor",type:"esriFieldTypeDouble"}],t([r({type:v.apiValues,json:{read:{source:"attributes.BarrierType",reader:v.read}}})],b.prototype,"barrierType",void 0),t([r()],b.prototype,"costs",void 0),t([c("costs",["attributes"])],b.prototype,"readCosts",null),t([r({type:Z,json:{write:!0}})],b.prototype,"geometry",void 0),t([r({json:{name:"attributes.Name"}})],b.prototype,"name",void 0),t([r({json:{name:"attributes.ObjectID"}})],b.prototype,"objectId",void 0),t([r({type:F})],b.prototype,"popupTemplate",void 0),t([r()],b.prototype,"scaleFactor",void 0),t([r({types:_})],b.prototype,"symbol",void 0),t([r({readOnly:!0,json:{read:!1}})],b.prototype,"type",void 0),b=z=t([S("esri.rest.support.PolylineBarrier")],b);const De=b;let g=class extends w{constructor(e){super(e),this.accumulateAttributes=null,this.directionsLanguage=null,this.findBestSequence=null,this.preserveFirstStop=null,this.preserveLastStop=null,this.startTimeIsUTC=null,this.timeWindowsAreUTC=null,this.travelMode=null}readAccumulateAttributes(e){return e==null?null:e.map(i=>C.fromJSON(i))}writeAccumulateAttributes(e,i,s){e!=null&&e.length&&(i[s]=e.map(o=>C.toJSON(o)))}};t([r({type:[String],json:{name:"accumulateAttributeNames",write:!0}})],g.prototype,"accumulateAttributes",void 0),t([c("accumulateAttributes")],g.prototype,"readAccumulateAttributes",null),t([I("accumulateAttributes")],g.prototype,"writeAccumulateAttributes",null),t([r({type:String,json:{write:!0}})],g.prototype,"directionsLanguage",void 0),t([r({type:Boolean,json:{write:!0}})],g.prototype,"findBestSequence",void 0),t([r({type:Boolean,json:{write:!0}})],g.prototype,"preserveFirstStop",void 0),t([r({type:Boolean,json:{write:!0}})],g.prototype,"preserveLastStop",void 0),t([r({type:Boolean,json:{write:!0}})],g.prototype,"startTimeIsUTC",void 0),t([r({type:Boolean,json:{write:!0}})],g.prototype,"timeWindowsAreUTC",void 0),t([r({type:ge,json:{write:!0}})],g.prototype,"travelMode",void 0),g=t([S("esri.rest.support.RouteSettings")],g);const Ae=g;var Y;let n=Y=class extends O.ClonableMixin(w){constructor(e){super(e),this.analysisSettings=null,this.endTime=null,this.endTimeOffset=null,this.firstStopId=null,this.geometry=null,this.lastStopId=null,this.messages=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.startTime=null,this.startTimeOffset=null,this.stopCount=null,this.symbol=null,this.totalCosts=null,this.totalDistance=null,this.totalDuration=null,this.totalLateDuration=null,this.totalViolations=null,this.totalWait=null,this.totalWaitDuration=null,this.type="route-info",this.version="1.0.0"}readEndTime(e,i){return i.attributes.EndTimeUTC!=null?new Date(i.attributes.EndTimeUTC):null}readEndTimeOffset(e,i){return R(i.attributes.EndTime,i.attributes.EndTimeUTC)}readStartTime(e,i){return i.attributes.StartTimeUTC!=null?new Date(i.attributes.StartTimeUTC):null}readStartTimeOffset(e,i){return R(i.attributes.StartTime,i.attributes.StartTimeUTC)}readTotalCosts(e,i){return f(i.attributes,"Total_")}readTotalViolations(e,i){return f(i.attributes,"TotalViolation_")}readTotalWait(e,i){return f(i.attributes,"TotalWait_")}static fromGraphic(e){return new Y({analysisSettings:e.attributes.AnalysisSettings!=null?Ae.fromJSON(JSON.parse(e.attributes.AnalysisSettings)):null,endTime:e.attributes.EndTime!=null?new Date(e.attributes.EndTime):null,endTimeOffset:e.attributes.EndUTCOffset??null,geometry:e.geometry,messages:e.attributes.Messages!=null?JSON.parse(e.attributes.Messages):null,name:e.attributes.RouteName,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,startTime:e.attributes.StartTime!=null?new Date(e.attributes.StartTime):null,startTimeOffset:e.attributes.StartUTCOffset??null,symbol:e.symbol,totalCosts:e.attributes.TotalCosts!=null?U(JSON.parse(e.attributes.TotalCosts)):null,totalDistance:e.attributes.TotalMeters??null,totalDuration:e.attributes.TotalMinutes??null,totalLateDuration:e.attributes.TotalLateMinutes??null,totalWaitDuration:e.attributes.TotalWaitMinutes??null,version:e.attributes.Version})}toGraphic(){const e={ObjectID:this.objectId,AnalysisSettings:this.analysisSettings!=null?JSON.stringify(this.analysisSettings.toJSON()):null,EndTime:this.endTime!=null?this.endTime.getTime():null,EndUTCOffset:this.endTimeOffset,Messages:this.messages!=null?JSON.stringify(this.messages):null,RouteName:this.name,StartTime:this.startTime!=null?this.startTime.getTime():null,StartUTCOffset:this.startTimeOffset,TotalCosts:this.totalCosts!=null?JSON.stringify(k(this.totalCosts)):null,TotalLateMinutes:this.totalLateDuration,TotalMeters:this.totalDistance,TotalMinutes:this.totalDuration,TotalWaitMinutes:this.totalWaitDuration,Version:this.version};return new j({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};n.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AnalysisSettings",alias:"Analysis Settings",type:"esriFieldTypeString"},{name:"EndTime",alias:"End Time",type:"esriFieldTypeDate"},{name:"EndUTCOffset",alias:"End Time Offset",type:"esriFieldTypeInteger"},{name:"Messages",alias:"Messages",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"StartTime",alias:"Start Time",type:"esriFieldTypeDate"},{name:"StartUTCOffset",alias:"Start Time Offset",type:"esriFieldTypeInteger"},{name:"TotalCosts",alias:"Total Costs",type:"esriFieldTypeString"},{name:"TotalLateMinutes",alias:"Total Late Minutes",type:"esriFieldTypeDouble"},{name:"TotalMeters",alias:"Total Meters",type:"esriFieldTypeDouble"},{name:"TotalMinutes",alias:"Total Minutes",type:"esriFieldTypeDouble"},{name:"TotalWaitMinutes",alias:"Total Wait Minutes",type:"esriFieldTypeDouble"},{name:"Version",alias:"Version",type:"esriFieldTypeString"}],t([r()],n.prototype,"analysisSettings",void 0),t([r({type:Date})],n.prototype,"endTime",void 0),t([c("endTime",["attributes.EndTimeUTC"])],n.prototype,"readEndTime",null),t([r()],n.prototype,"endTimeOffset",void 0),t([c("endTimeOffset",["attributes.EndTime","attributes.EndTimeUTC"])],n.prototype,"readEndTimeOffset",null),t([r({json:{read:{source:"attributes.FirstStopID"}}})],n.prototype,"firstStopId",void 0),t([r({type:Z})],n.prototype,"geometry",void 0),t([r({json:{read:{source:"attributes.LastStopID"}}})],n.prototype,"lastStopId",void 0),t([r()],n.prototype,"messages",void 0),t([r({json:{read:{source:"attributes.Name"}}})],n.prototype,"name",void 0),t([r({json:{read:{source:"attributes.ObjectID"}}})],n.prototype,"objectId",void 0),t([r({type:F})],n.prototype,"popupTemplate",void 0),t([r({type:Date})],n.prototype,"startTime",void 0),t([c("startTime",["attributes.StartTimeUTC"])],n.prototype,"readStartTime",null),t([r()],n.prototype,"startTimeOffset",void 0),t([c("startTimeOffset",["attributes.StartTime","attributes.StartTimeUTC"])],n.prototype,"readStartTimeOffset",null),t([r({json:{read:{source:"attributes.StopCount"}}})],n.prototype,"stopCount",void 0),t([r({types:_})],n.prototype,"symbol",void 0),t([r()],n.prototype,"totalCosts",void 0),t([c("totalCosts",["attributes"])],n.prototype,"readTotalCosts",null),t([r()],n.prototype,"totalDistance",void 0),t([r()],n.prototype,"totalDuration",void 0),t([r()],n.prototype,"totalLateDuration",void 0),t([r()],n.prototype,"totalViolations",void 0),t([c("totalViolations",["attributes"])],n.prototype,"readTotalViolations",null),t([r()],n.prototype,"totalWait",void 0),t([c("totalWait",["attributes"])],n.prototype,"readTotalWait",null),t([r()],n.prototype,"totalWaitDuration",void 0),t([r({readOnly:!0,json:{read:!1}})],n.prototype,"type",void 0),t([r()],n.prototype,"version",void 0),n=Y=t([S("esri.rest.support.RouteInfo")],n);const Oe=n;var X;let a=X=class extends O.ClonableMixin(w){constructor(e){super(e),this.arriveCurbApproach=null,this.arriveTime=null,this.arriveTimeOffset=null,this.bearing=null,this.bearingTol=null,this.cumulativeCosts=null,this.cumulativeDistance=null,this.cumulativeDuration=null,this.curbApproach=null,this.departCurbApproach=null,this.departTime=null,this.departTimeOffset=null,this.distanceToNetworkInMeters=null,this.geometry=null,this.lateDuration=null,this.locationType=null,this.name=null,this.navLatency=null,this.objectId=null,this.popupTemplate=null,this.posAlong=null,this.routeName=null,this.serviceCosts=null,this.serviceDistance=null,this.serviceDuration=null,this.sequence=null,this.sideOfEdge=null,this.snapX=null,this.snapY=null,this.snapZ=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.timeWindowEnd=null,this.timeWindowEndOffset=null,this.timeWindowStart=null,this.timeWindowStartOffset=null,this.type="stop",this.violations=null,this.waitDuration=null,this.wait=null}readArriveTimeOffset(e,i){return R(i.attributes.ArriveTime,i.attributes.ArriveTimeUTC)}readCumulativeCosts(e,i){return f(i.attributes,"Cumul_")}readDepartTimeOffset(e,i){return R(i.attributes.DepartTime,i.attributes.DepartTimeUTC)}readServiceCosts(e,i){return f(i.attributes,"Attr_")}writeServiceCosts(e,i){ee(e,i,"Attr_")}writeTimeWindowEnd(e,i){e!=null&&(i.attributes||(i.attributes={}),i.attributes.TimeWindowEnd=e.getTime())}writeTimeWindowStart(e,i){e!=null&&(i.attributes||(i.attributes={}),i.attributes.TimeWindowStart=e.getTime())}readViolations(e,i){return f(i.attributes,"Violation_")}readWait(e,i){return f(i.attributes,"Wait_")}static fromGraphic(e){return new X({arriveCurbApproach:e.attributes.ArrivalCurbApproach!=null?y.fromJSON(e.attributes.ArrivalCurbApproach):null,arriveTime:e.attributes.ArrivalTime!=null?new Date(e.attributes.ArrivalTime):null,arriveTimeOffset:e.attributes.ArrivalUTCOffset,cumulativeCosts:e.attributes.CumulativeCosts!=null?U(JSON.parse(e.attributes.CumulativeCosts)):null,cumulativeDistance:e.attributes.CumulativeMeters??null,cumulativeDuration:e.attributes.CumulativeMinutes??null,curbApproach:e.attributes.CurbApproach!=null?y.fromJSON(e.attributes.CurbApproach):null,departCurbApproach:e.attributes.DepartureCurbApproach!=null?y.fromJSON(e.attributes.DepartureCurbApproach):null,departTime:e.attributes.DepartureTime!=null?new Date(e.attributes.DepartureTime):null,departTimeOffset:e.attributes.DepartureUTCOffset??null,geometry:e.geometry,lateDuration:e.attributes.LateMinutes??null,locationType:e.attributes.LocationType!=null?L.fromJSON(e.attributes.LocationType):null,name:e.attributes.Name,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,routeName:e.attributes.RouteName,sequence:e.attributes.Sequence??null,serviceCosts:e.attributes.ServiceCosts!=null?U(JSON.parse(e.attributes.ServiceCosts)):null,serviceDistance:e.attributes.ServiceMeters??null,serviceDuration:e.attributes.ServiceMinutes??null,status:e.attributes.Status!=null?A.fromJSON(e.attributes.Status):null,symbol:e.symbol,timeWindowEnd:e.attributes.TimeWindowEnd!=null?new Date(e.attributes.TimeWindowEnd):null,timeWindowEndOffset:e.attributes.TimeWindowEndUTCOffset??null,timeWindowStart:e.attributes.TimeWindowStart!=null?new Date(e.attributes.TimeWindowStart):null,timeWindowStartOffset:e.attributes.TimeWindowStartUTCOffset??null,waitDuration:e.attributes.WaitMinutes??null})}toGraphic(){const e={ObjectID:this.objectId,ArrivalCurbApproach:this.arriveCurbApproach!=null?y.toJSON(this.arriveCurbApproach):null,ArrivalTime:this.arriveTime!=null?this.arriveTime.getTime():null,ArrivalUTCOffset:this.arriveTimeOffset,CumulativeCosts:this.cumulativeCosts!=null?JSON.stringify(k(this.cumulativeCosts)):null,CumulativeMeters:this.cumulativeDistance,CumulativeMinutes:this.cumulativeDuration,CurbApproach:this.curbApproach!=null?y.toJSON(this.curbApproach):null,DepartureCurbApproach:this.departCurbApproach!=null?y.toJSON(this.departCurbApproach):null,DepartureTime:this.departTime!=null?this.departTime.getTime():null,DepartureUTCOffset:this.departTimeOffset,LateMinutes:this.lateDuration,LocationType:this.locationType!=null?L.toJSON(this.locationType):null,Name:this.name,RouteName:this.routeName,Sequence:this.sequence,ServiceCosts:this.serviceCosts!=null?JSON.stringify(k(this.serviceCosts)):null,ServiceMeters:this.serviceDistance,ServiceMinutes:this.serviceDuration,Status:this.status!=null?A.toJSON(this.status):null,TimeWindowEnd:this.timeWindowEnd!=null?this.timeWindowEnd.getTime():null,TimeWindowEndUTCOffset:this.timeWindowEndOffset??this.arriveTimeOffset,TimeWindowStart:this.timeWindowStart!=null?this.timeWindowStart.getTime():null,TimeWindowStartUTCOffset:this.timeWindowStartOffset??this.arriveTimeOffset,WaitMinutes:this.waitDuration};return new j({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};a.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"ArrivalCurbApproach",alias:"Arrival Curb Approach",type:"esriFieldTypeInteger"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time",type:"esriFieldTypeInteger"},{name:"CumulativeCosts",alias:"Cumulative Costs",type:"esriFieldTypeString"},{name:"CumulativeMeters",alias:"Cumulative Meters",type:"esriFieldTypeDouble"},{name:"CumulativeMinutes",alias:"Cumulative Minutes",type:"esriFieldTypeDouble"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureCurbApproach",alias:"Departure Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureTime",alias:"Departure Time",type:"esriFieldTypeDate"},{name:"DepartureUTCOffset",alias:"Departure Time",type:"esriFieldTypeInteger"},{name:"LateMinutes",alias:"Minutes Late",type:"esriFieldTypeDouble"},{name:"LocationType",alias:"Location Type",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ServiceCosts",alias:"Service Costs",type:"esriFieldTypeString"},{name:"ServiceMeters",alias:"Service Meters",type:"esriFieldTypeDouble"},{name:"ServiceMinutes",alias:"Service Minutes",type:"esriFieldTypeDouble"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"},{name:"TimeWindowEnd",alias:"Time Window End",type:"esriFieldTypeDate"},{name:"TimeWindowEndUTCOffset",alias:"Time Window End Offset",type:"esriFieldTypeInteger"},{name:"TimeWindowStart",alias:"Time Window Start",type:"esriFieldTypeDate"},{name:"TimeWindowStartUTCOffset",alias:"Time Window Start Offset",type:"esriFieldTypeInteger"},{name:"WaitMinutes",alias:"Minutes Wait",type:"esriFieldTypeDouble"}],t([r({type:y.apiValues,json:{read:{source:"attributes.ArrivalCurbApproach",reader:y.read}}})],a.prototype,"arriveCurbApproach",void 0),t([r({type:Date,json:{read:{source:"attributes.ArriveTimeUTC"}}})],a.prototype,"arriveTime",void 0),t([r()],a.prototype,"arriveTimeOffset",void 0),t([c("arriveTimeOffset",["attributes.ArriveTime","attributes.ArriveTimeUTC"])],a.prototype,"readArriveTimeOffset",null),t([r({json:{name:"attributes.Bearing",read:!1,write:!0}})],a.prototype,"bearing",void 0),t([r({json:{name:"attributes.BearingTol",read:!1,write:!0}})],a.prototype,"bearingTol",void 0),t([r()],a.prototype,"cumulativeCosts",void 0),t([c("cumulativeCosts",["attributes"])],a.prototype,"readCumulativeCosts",null),t([r()],a.prototype,"cumulativeDistance",void 0),t([r()],a.prototype,"cumulativeDuration",void 0),t([r({type:y.apiValues,json:{name:"attributes.CurbApproach",read:{reader:y.read},write:{writer:y.write}}})],a.prototype,"curbApproach",void 0),t([r({type:y.apiValues,json:{read:{source:"attributes.DepartCurbApproach",reader:y.read}}})],a.prototype,"departCurbApproach",void 0),t([r({type:Date,json:{read:{source:"attributes.DepartTimeUTC"}}})],a.prototype,"departTime",void 0),t([r()],a.prototype,"departTimeOffset",void 0),t([c("departTimeOffset",["attributes.DepartTime","attributes.DepartTimeUTC"])],a.prototype,"readDepartTimeOffset",null),t([r({json:{read:{source:"attributes.DistanceToNetworkInMeters"}}})],a.prototype,"distanceToNetworkInMeters",void 0),t([r({type:Q,json:{write:!0}})],a.prototype,"geometry",void 0),t([r()],a.prototype,"lateDuration",void 0),t([r({type:L.apiValues,json:{name:"attributes.LocationType",read:{reader:L.read},write:{writer:L.write}}})],a.prototype,"locationType",void 0),t([r({json:{name:"attributes.Name"}})],a.prototype,"name",void 0),t([r({json:{name:"attributes.NavLatency",read:!1,write:!0}})],a.prototype,"navLatency",void 0),t([r({json:{name:"attributes.ObjectID"}})],a.prototype,"objectId",void 0),t([r({type:F})],a.prototype,"popupTemplate",void 0),t([r({json:{read:{source:"attributes.PosAlong"}}})],a.prototype,"posAlong",void 0),t([r({json:{name:"attributes.RouteName"}})],a.prototype,"routeName",void 0),t([r()],a.prototype,"serviceCosts",void 0),t([c("serviceCosts",["attributes"])],a.prototype,"readServiceCosts",null),t([I("serviceCosts")],a.prototype,"writeServiceCosts",null),t([r()],a.prototype,"serviceDistance",void 0),t([r()],a.prototype,"serviceDuration",void 0),t([r({json:{name:"attributes.Sequence"}})],a.prototype,"sequence",void 0),t([r({type:P.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:P.read}}})],a.prototype,"sideOfEdge",void 0),t([r({json:{read:{source:"attributes.SnapX"}}})],a.prototype,"snapX",void 0),t([r({json:{read:{source:"attributes.SnapY"}}})],a.prototype,"snapY",void 0),t([r({json:{read:{source:"attributes.SnapZ"}}})],a.prototype,"snapZ",void 0),t([r({json:{read:{source:"attributes.SourceID"}}})],a.prototype,"sourceId",void 0),t([r({json:{read:{source:"attributes.SourceOID"}}})],a.prototype,"sourceOid",void 0),t([r({type:A.apiValues,json:{read:{source:"attributes.Status",reader:A.read}}})],a.prototype,"status",void 0),t([r({types:_})],a.prototype,"symbol",void 0),t([r({type:Date,json:{name:"attributes.TimeWindowEnd"}})],a.prototype,"timeWindowEnd",void 0),t([I("timeWindowEnd")],a.prototype,"writeTimeWindowEnd",null),t([r()],a.prototype,"timeWindowEndOffset",void 0),t([r({type:Date,json:{name:"attributes.TimeWindowStart"}})],a.prototype,"timeWindowStart",void 0),t([I("timeWindowStart")],a.prototype,"writeTimeWindowStart",null),t([r()],a.prototype,"timeWindowStartOffset",void 0),t([r({readOnly:!0,json:{read:!1}})],a.prototype,"type",void 0),t([r()],a.prototype,"violations",void 0),t([c("violations",["attributes"])],a.prototype,"readViolations",null),t([r()],a.prototype,"waitDuration",void 0),t([r()],a.prototype,"wait",void 0),t([c("wait",["attributes"])],a.prototype,"readWait",null),a=X=t([S("esri.rest.support.Stop")],a);const Ie=a,Ce=["route-info","direction-line","direction-point","polygon-barrier","polyline-barrier","point-barrier","stop"],E={graphic:null,property:null,oldValue:null,newValue:null};function te(e){return e instanceof fe||e instanceof Se||e instanceof we||e instanceof Ne||e instanceof De||e instanceof Oe||e instanceof Ie}function je(e){return $.isCollection(e)&&e.length&&te(e.at(0))}function Fe(e){return Array.isArray(e)&&e.length>0&&te(e[0])}const _e=new Set(["default"]);let D=class extends pe(de){constructor(){super(...arguments),this._graphics=new $,this._highlightIds=new Map,this._networkFeatureMap=new Map,this._networkGraphicMap=new Map,this._interaction=null,this._loadInteractionPromise=null,this.interactive=!1}get _routeItems(){return new oe({getCollections:()=>this.layer==null||this.destroyed?[]:[this.layer.routeInfo!=null?new $([this.layer.routeInfo]):null,this.layer.directionLines,this.layer.directionPoints,this.layer.polygonBarriers,this.layer.polylineBarriers,this.layer.pointBarriers,this.layer.stops]})}initialize(){this.addHandles(V(()=>{const{interactive:e,suspended:i}=this;return{interactive:e,suspended:i}},({interactive:e,suspended:i})=>{const s=e&&!i;s&&this._getInteractionLoadPromise().then(o=>{o.enabled=this.interactive&&!this.suspended}),this._interaction&&(this._interaction.enabled=s)},ne)),this._updatingHandles.addOnCollectionChange(()=>this._routeItems,e=>this._routeItemsChanged(e),le)}destroy(){var e;this._networkFeatureMap.clear(),this._networkGraphicMap.clear(),this._graphics.removeAll(),(e=this._get("_routeItems"))==null||e.destroy()}attach(){this._createGraphicsView()}detach(){var e;this._destroyGraphicsView(),(e=this._interaction)!=null&&e.enabled&&(this._interaction.enabled=!1)}get selectedNetworkFeatures(){var e;return((e=this._interaction)==null?void 0:e.selectedNetworkFeatures)??null}async create(e){if(this.interactive)return(await this._getInteractionLoadPromise()).create(e)}async fetchPopupFeaturesAtLocation(e,i){return this._graphicsView.hitTest(e).filter(({popupTemplate:s})=>!!s)}highlight(e){let i;i=te(e)?[this._getNetworkFeatureUid(e)]:Fe(e)?e.map(o=>this._getNetworkFeatureUid(o)):je(e)?e.map(o=>this._getNetworkFeatureUid(o)).toArray():[e.uid];const s=i.filter(x);return s.length?(this._addHighlight(s),ie(()=>this._removeHighlight(s))):ie()}async hitTest(e,i){if(this.suspended)return null;const s=this._graphicsView.hitTest(e).filter(x).map(p=>this._networkGraphicMap.get(p));if(!s.length)return null;const{layer:o}=this;return s.reverse().map(p=>({type:"route",layer:o,mapPoint:e,networkFeature:p}))}isUpdating(){return this._graphicsView.updating}moveEnd(){}remove(e){var i;(i=this._interaction)==null||i.remove(e)}update(e){this._graphicsView.processUpdate(e)}viewChange(){this._graphicsView.viewChange()}_addHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const s=this._highlightIds.get(i);this._highlightIds.set(i,s+1)}else this._highlightIds.set(i,1);this._updateHighlight()}_createGraphic(e){const i=e.toGraphic();return i.layer=this.layer,i.sourceLayer=this.layer,i}_createGraphicsView(){const e=this.view,i=()=>this.requestUpdate(),s=new ce(e.featuresTilingScheme);this._graphicsView=new me({container:s,graphics:this._graphics,requestUpdateCallback:i,view:e}),this.container.addChild(s),this._updateHighlight()}_destroyGraphicsView(){this.container.removeChild(this._graphicsView.container),this._graphicsView.destroy()}_getDrawOrder(e){const i=this._networkGraphicMap.get(e);return Ce.indexOf(i.type)}_getInteractionLoadPromise(){return this._loadInteractionPromise||(this._loadInteractionPromise=this._loadInteraction(),this._updatingHandles.addPromise(this._loadInteractionPromise)),this._loadInteractionPromise}_getNetworkFeatureUid(e){return this._networkFeatureMap.has(e)?this._networkFeatureMap.get(e).uid:null}async _loadInteraction(){const{layer:e,view:i}=this,{RouteLayerInteraction:s}=await ue(async()=>{const{RouteLayerInteraction:o}=await import("./RouteLayerInteraction-CacUnf0e.js").then(p=>p.R);return{RouteLayerInteraction:o}},__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12]));return this._interaction=new s({view:i,layer:e}),this._interaction}_removeHighlight(e){for(const i of e)if(this._highlightIds.has(i)){const s=this._highlightIds.get(i)-1;s===0?this._highlightIds.delete(i):this._highlightIds.set(i,s)}this._updateHighlight()}_routeItemsChanged(e){if(e.removed.length){this._graphics.removeMany(e.removed.map(i=>{const s=this._networkFeatureMap.get(i);return this._networkFeatureMap.delete(i),this._networkGraphicMap.delete(s),s}));for(const i of e.removed)this.removeHandles(i)}if(e.added.length){this._graphics.addMany(e.added.map(i=>{const s=this._createGraphic(i);return s.symbol==null?null:(this._networkFeatureMap.set(i,s),this._networkGraphicMap.set(s,i),s)}).filter(x));for(const i of e.added)this.addHandles([V(()=>i.geometry,(s,o)=>{this._updateGraphic(i,"geometry",s,o)}),V(()=>i.symbol,(s,o)=>{this._updateGraphic(i,"symbol",s,o)}),V(()=>i.popupTemplate,s=>{this._networkFeatureMap.has(i)&&(this._networkFeatureMap.get(i).popupTemplate=s)})],i);this._graphics.sort((i,s)=>this._getDrawOrder(i)-this._getDrawOrder(s))}}_updateGraphic(e,i,s,o){if(!this._networkFeatureMap.has(e)){const N=this._createGraphic(e);return this._networkFeatureMap.set(e,N),this._networkGraphicMap.set(N,e),void this._graphics.add(N)}const p=this._networkFeatureMap.get(e);p[i]=s,E.graphic=p,E.property=i,E.oldValue=o,E.newValue=s,this._graphicsView.graphicUpdateHandler(E)}_updateHighlight(){const e=Array.from(this._highlightIds.keys()),i=this._getHighlightBits(_e.values());this._graphicsView.setHighlight(e.map(s=>({objectId:s,highlightFlags:i})))}};t([r()],D.prototype,"_graphics",void 0),t([r()],D.prototype,"_routeItems",null),t([r()],D.prototype,"_interaction",void 0),t([r()],D.prototype,"interactive",void 0),t([r({readOnly:!0})],D.prototype,"selectedNetworkFeatures",null),D=t([S("esri.views.2d.layers.RouteLayerView2D")],D);const Me=D,Ye=Object.freeze(Object.defineProperty({__proto__:null,default:Me},Symbol.toStringTag,{value:"Module"}));export{C as D,$e as M,qe as R,Oe as S,Ne as T,ve as U,we as a,Ge as b,ge as c,Pe as d,R as e,re as f,Be as g,xe as h,fe as i,De as j,Ae as k,Re as l,he as m,Je as n,ze as o,Ye as p,He as q,ye as r,Ve as s,We as t,Ie as w,Se as y};
