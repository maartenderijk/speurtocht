import{aO as s,s as m,a as p}from"./index-BHVnKyhT.js";import{p as n}from"./MeshVertexAttributes-0G08HTuC.js";import{B as a}from"./vertexSpaceConversion-CD_YNmfv.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-DiMo9y2J.js";import"./computeTranslationToOriginAndRotation-Ctz-Qpl9.js";import"./projectPointToVector-CpLCxy_S.js";import"./meshVertexSpaceUtils-CxBe8FOT.js";import"./MeshLocalVertexSpace-Bk8p_RUS.js";import"./vec3-BEfrtMyl.js";import"./BufferView-CkAzLrFo.js";import"./vec4-C3Ls6GiW.js";async function M(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
