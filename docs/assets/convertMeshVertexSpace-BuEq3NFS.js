import{aO as s,s as m,a as p}from"./index-DJGFuZJs.js";import{p as n}from"./MeshVertexAttributes-BaDzhshm.js";import{B as a}from"./vertexSpaceConversion-Db_1UnBh.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-DNaTHBnO.js";import"./computeTranslationToOriginAndRotation-B8L6vqpD.js";import"./projectPointToVector-5DhvCJ0n.js";import"./meshVertexSpaceUtils-kBgupcw3.js";import"./MeshLocalVertexSpace-BOxZ4j1Y.js";import"./vec3-BbXHxfa_.js";import"./BufferView-CD-xaDCo.js";import"./vec4-YNcvsXt7.js";async function M(t,o,r){await Promise.resolve(),s(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
